package eth

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/gob"
	"fmt"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/status-im/keycard-go/hexutils"
	"github.com/stretchr/testify/require"
	"math/big"
	"testing"
)

var (
	encoded = "/6F/AwEBB0NhbGxNc2cB/4AAAQsBBEZyb20B/4IAAQJUbwH/ggABA0dhcwEGAAEIR2FzUHJpY2UB/4QAAQlHYXNGZWVDYXAB/4QAAQlHYXNUaXBDYXAB/4QAAQVWYWx1ZQH/hAABBERhdGEBCgABCkFjY2Vzc0xpc3QB/4wAAQ1CbG9iR2FzRmVlQ2FwAf+EAAEKQmxvYkhhc2hlcwH/igAAABf/gQEBAQdBZGRyZXNzAf+CAAEGASgAAAr/gwUBAv+OAAAAGf+LAgEBCkFjY2Vzc0xpc3QB/4wAAf+GAAA3/4UDAQELQWNjZXNzVHVwbGUB/4YAAQIBB0FkZHJlc3MB/4IAAQtTdG9yYWdlS2V5cwH/igAAABz/iQIBAQ1bXWNvbW1vbi5IYXNoAf+KAAH/iAAAFP+HAQEBBEhhc2gB/4gAAQYBQAAA/hVq/4ABFGAsYv+gRf+EKf+ELgY5Av+y/4QMa//GCP/IOQEUTln/tEhH/7N5V/+F/4j/kgz/p/+P/78m/8D/tP+VbAH8BfXhAAIGAgidXzIAAQYCAaE7hgABAQIB/hUMifyiNSoVhRnS2qv35TaGJy6Cjdv/lIcgRUbZGEkLLs9ggGBAUjSAFWEAEFdgAID9W1BhABlhAB5WW2EA3lZbYABUYQEAkARg/xYVYQCKV2BAUWJGG81g5RuBUmAgYASCAVJgJ2AkggFSf0luaXRpYWxpemFibGU6IGNvbnRyYWN0IGlzIGluaXRpYESCAVJmYWxpemluZ2DIG2BkggFSYIQBYEBRgJEDkP1bYABUYP+QgRYQFWEA3FdgAIBUYP8ZFmD/kIEXkJFVYEBRkIFSf38muD/5bh8ramgvEzhS9nmKCcRl2pWSFGDO+zhHQCSYkGAgAWBAUYCRA5ChW1ZbYRP/gGEA7WAAOWAA8/5ggGBAUjSAFWEAEFdgAID9W1BgBDYQYQDUV2AANWDgHIBjXZOj/BFhAIFXgGOSft4tEWEAW1eAY5J+3i0UYQIxV4BjqlV0UhRhAk9XgGPIlwGiFGECYldgAID9W4BjXZOj/BRhAcxXgGN2H0STFGECAFeAY39G3bIUYQITV2AAgP1bgGNIXMlVEWEAsleAY0hcyVUUYQFYV4BjVP1NUBRhAWtXgGNcl1q7FGEBtFdgAID9W4BjNegKsxRhANlXgGM2hwEaFGEBI1eAYzy3R78UYQE4V1tgAID9W2AyVGEA+ZBz//////////////////////////8WgVZbYEBRc///////////////////////////kJEWgVJgIAFbYEBRgJEDkPNbYQE2YQExNmAEYQ/3VlthAoJWWwBbYAFUYQD5kHP//////////////////////////xaBVlthATZhAWY2YARhEHpWW2EDM1ZbYQGnYEBRgGBAAWBAUoBgBYFSYCABfzIuNC4wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgVJQgVZbYEBRYQEakZBhER5WW2EBvGEFHVZbYEBRkBUVgVJgIAFhARpWW2EBvGEB2jZgBGEROFZbYDFgIJCBUmAAk4RSYECAhSCCUpKEUoKEIJBSglKQIFRg/xaBVlthATZhAg42YARhEXlWW2EFtlZbYAJUc///////////////////////////FmEA+VZbYAFUc///////////////////////////FmEA+VZbYQE2YQJdNmAEYRIRVlthCl1WW2ACVGEA+ZBz//////////////////////////8WgVZbYQKKYQsZVlthAxtXYEBRfwjDeaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgVJgIGAEggFSYC1gJIIBUn9FUkM3MjFCcmlkZ2U6IGFjY291bnQgaXMgbm90IGV4dGBEggFSf2VybmFsbHkgb3duZWQAAAAAAAAAAAAAAAAAAAAAAAAAYGSCAVJghAFbYEBRgJEDkP1bYQMrhoYzM4iIiIhhC1ZWW1BQUFBQUFZbYABUYQEAkARg/xYVgIAVYQNTV1BgAFRgAWD/kJEWEFuAYQNtV1AwOxWAFWEDbVdQYABUYP8WYAEUW2ED+VdgQFF/CMN5oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBUmAgYASCAVJgLmAkggFSf0luaXRpYWxpemFibGU6IGNvbnRyYWN0IGlzIGFscmVhYESCAVJ/ZHkgaW5pdGlhbGl6ZWQAAAAAAAAAAAAAAAAAAAAAAABgZIIBUmCEAWEDElZbYACAVH//////////////////////////////////////////ABZgAReQVYAVYQRXV2AAgFR/////////////////////////////////////////AP8WYQEAF5BVW2AygFR/////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAWc///////////////////////////hBYXkFVhBLWDc0IAAAAAAAAAAAAAAAAAAAAAAAAUYQ6GVluAFWEFGFdgAIBUf////////////////////////////////////////wD/FpBVYEBRYAGBUn9/Jrg/+W4fK2poLxM4UvZ5ignEZdqVkhRgzvs4R0AkmJBgIAFgQFGAkQOQoVtQUFBWW2AyVGBAgFF/XJdauwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBUpBRYACSc///////////////////////////FpFjXJdau5FgBICDAZJgIJKRkIKQAwGBhlr6FYAVYQWNVz1gAIA+PWAA/VtQUFBQYEBRPWAfGWAfggEWggGAYEBSUIEBkGEFsZGQYRKIVluQUJBWW2ABVHP//////////////////////////xYzFIAVYQaLV1BgAlRgAVRgQIBRf24pbkUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgVKQUXP//////////////////////////5OEFpOQkhaRY24pbkWRYASAggGSYCCSkJGQgpADAYGGWvoVgBVhBk9XPWAAgD49YAD9W1BQUFBgQFE9YB8ZYB+CARaCAYBgQFJQgQGQYQZzkZBhEqpWW3P//////////////////////////xYUW2EHF1dgQFF/CMN5oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBUmAgYASCAVJgP2AkggFSf0VSQzcyMUJyaWRnZTogZnVuY3Rpb24gY2FuIG9ubHkgYESCAVJ/YmUgY2FsbGVkIGZyb20gdGhlIG90aGVyIGJyaWRnZQBgZIIBUmCEAWEDElZbYQcfYQUdVlsVYQeGV2BAUX8Iw3mgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIFSYCBgBIIBUmAWYCSCAVJ/TDFFUkM3MjFCcmlkZ2U6IHBhdXNlZAAAAAAAAAAAAABgRIIBUmBkAWEDElZbMHP//////////////////////////4gWA2EIK1dgQFF/CMN5oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBUmAgYASCAVJgKmAkggFSf0wxRVJDNzIxQnJpZGdlOiBsb2NhbCB0b2tlbiBjYW5uYESCAVJ/b3QgYmUgc2VsZgAAAAAAAAAAAAAAAAAAAAAAAAAAAABgZIIBUmCEAWEDElZbc///////////////////////////gIgWYACQgVJgMWAgkIFSYECAgyCTihaDUpKBUoKCIIaDUpBSIFRg/xYVFWABFGEI+ldgQFF/CMN5oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBUmAgYASCAVJgOWAkggFSf0wxRVJDNzIxQnJpZGdlOiBUb2tlbiBJRCBpcyBub3QgYESCAVJ/ZXNjcm93ZWQgaW4gdGhlIEwxIEJyaWRnZQAAAAAAAABgZIIBUmCEAWEDElZbc///////////////////////////h4EWYACBgVJgMWAgkIFSYECAgyCLhhaEUoJSgIMgiIRSkJFSkIGQIIBUf/////////////////////////////////////////8AFpBVUX9ChC4OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIFSMGAEggFSkYYWYCSDAVJgRIIBhZBSkGNChC4OkGBkAWAAYEBRgIMDgWAAh4A7FYAVYQm6V2AAgP1bUFrxFYAVYQnOVz1gAIA+PWAA/VtQUFBQhHP//////////////////////////xaGc///////////////////////////Fohz//////////////////////////8Wfx85v2cHtdYIRT4K5MBntWK8xMhcD1Yu9dLHdNLn8TGsh4eHh2BAUWEKTJSTkpGQYRMQVltgQFGAkQOQpFBQUFBQUFBWW3P//////////////////////////4UWYQsAV2BAUX8Iw3mgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIFSYCBgBIIBUmAwYCSCAVJ/RVJDNzIxQnJpZGdlOiBuZnQgcmVjaXBpZW50IGNhbm5gRIIBUn9vdCBiZSBhZGRyZXNzKDApAAAAAAAAAAAAAAAAAAAAAGBkggFSYIQBYQMSVlthCxCHhzOIiIiIiGELVlZbUFBQUFBQUFZbYAAyMwNhCyhXUGABkFZbMztgFwNhC1BXYEBRYCCBAWBAUmAgYACCMzxRYOgcYu8BABSQUJBWW1BgAJBWW3P//////////////////////////4cWYQv5V2BAUX8Iw3mgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIFSYCBgBIIBUmAxYCSCAVJ/TDFFUkM3MjFCcmlkZ2U6IHJlbW90ZSB0b2tlbiBjYW5gRIIBUn9ub3QgYmUgYWRkcmVzcygwKQAAAAAAAAAAAAAAAAAAAGBkggFSYIQBYQMSVltgAIeJiIiIh4dgQFFgJAFhDBiXlpWUk5KRkGETUFZbYECAUX//////////////////////////////////////////4IGEAwGBUpGBUmAggIMBgFF7/////////////////////////////////////xZ/dh9EkwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXkFJz//////////////////////////+MgRZgAIGBUmAxhFKEgSCOhBaCUoRShIEgi4JSkJNSkYOQIIBUf/////////////////////////////////////////8AFmABF5BVkVF/I7hy3QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBUpGKFmAEgwFSMGAkgwFSYESCAYiQUpGSUGMjuHLdkGBkAWAAYEBRgIMDgWAAh4A7FYAVYQ1QV2AAgP1bUFrxFYAVYQ1kVz1gAIA+PWAA/VtQUGABVGACVGBAUX89uyArAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIFSc///////////////////////////koMWlFBjPbsgK5NQYQ3HkpCRFpCFkImQYAQBYROtVltgAGBAUYCDA4FgAIeAOxWAFWEN4VdgAID9W1Ba8RWAFWEN9Vc9YACAPj1gAP1bUFBQUIZz//////////////////////////8WiHP//////////////////////////xaKc///////////////////////////Fn+3Rg4qiA8lbr7zQGEW/z7uDO5R68zcKkBpj4frsunBpYmJiIhgQFFhDnOUk5KRkGETEFZbYEBRgJEDkKRQUFBQUFBQUFBWW2AAVGEBAJAEYP8WYQ8dV2BAUX8Iw3mgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIFSYCBgBIIBUmArYCSCAVJ/SW5pdGlhbGl6YWJsZTogY29udHJhY3QgaXMgbm90IGlgRIIBUn9uaXRpYWxpemluZwAAAAAAAAAAAAAAAAAAAAAAAAAAAGBkggFSYIQBYQMSVltgAYBUc///////////////////////////k4QWf////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAkYIWF5CRVWACgFSSkJMWkRYXkFVWW3P//////////////////////////4EWgRRhD5JXYACA/VtQVluANWP/////gRaBFGEPqVdgAID9W5GQUFZbYACAg2AfhAESYQ/AV2AAgP1bUIE1Z///////////gREVYQ/YV2AAgP1bYCCDAZFQg2AggoUBAREVYQ/wV2AAgP1bklCSkFBWW2AAgGAAgGAAgGCgh4kDEhVhEBBXYACA/VuGNWEQG4FhD3BWW5VQYCCHATVhECuBYQ9wVluUUGBAhwE1k1BhEEBgYIgBYQ+VVluSUGCAhwE1Z///////////gREVYRBcV2AAgP1bYRBoiYKKAWEPrlZbl5qWmVCUl1CSlZOUklBQUFZbYACAYECDhQMSFWEQjVdgAID9W4I1YRCYgWEPcFZbkVBgIIMBNWEQqIFhD3BWW4CRUFCSUJKQUFZbYACBUYCEUmAAW4GBEBVhENlXYCCBhQGBAVGGgwGCAVIBYRC9VluBgREVYRDrV2AAYCCDhwEBUltQYB8Bf//////////////////////////////////////////gFpKQkgFgIAGSkVBQVltgIIFSYABhETFgIIMBhGEQs1Zbk5JQUFBWW2AAgGAAYGCEhgMSFWERTVdgAID9W4M1YRFYgWEPcFZbklBgIIQBNWERaIFhD3BWW5KVkpRQUFBgQJGQkQE1kFZbYACAYACAYACAYABgwIiKAxIVYRGUV2AAgP1bhzVhEZ+BYQ9wVluWUGAgiAE1YRGvgWEPcFZblVBgQIgBNWERv4FhD3BWW5RQYGCIATVhEc+BYQ9wVluTUGCAiAE1klBgoIgBNWf//////////4ERFWER8ldgAID9W2ER/oqCiwFhD65WW5ibl5pQlZhQk5aSlZKTUFBQVltgAIBgAIBgAIBgAGDAiIoDEhVhEixXYACA/VuHNWESN4FhD3BWW5ZQYCCIATVhEkeBYQ9wVluVUGBAiAE1YRJXgWEPcFZblFBgYIgBNZNQYRJsYICJAWEPlVZbklBgoIgBNWf//////////4ERFWER8ldgAID9W2AAYCCChAMSFWESmldgAID9W4FRgBUVgRRhETFXYACA/VtgAGAggoQDEhVhErxXYACA/VuBUWERMYFhD3BWW4GDUoGBYCCFATdQYABgIIKEAQFSYABgIH//////////////////////////////////////////4GAfhAEWhAEBkFCSkVBQVltz//////////////////////////+FFoFSg2AgggFSYGBgQIIBUmAAYRNGYGCDAYSGYRLHVluWlVBQUFBQUFZbYABz//////////////////////////+AihaDUoCJFmAghAFSgIgWYECEAVKAhxZgYIQBUlCEYICDAVJgwGCggwFSYROgYMCDAYSGYRLHVluZmFBQUFBQUFBQUFZbc///////////////////////////hBaBUmBgYCCCAVJgAGET3GBggwGFYRCzVluQUGP/////gxZgQIMBUpSTUFBQUFb+oWRzb2xjQwAIDwAKAA=="
)

// Get Tx Receipt
func TestDoCall(t *testing.T) {
	rawRPCURL := "http://localhost:7545"

	client, _ := ethclient.Dial(rawRPCURL)

	// ===== 反序列化 =====
	raw, err := base64.StdEncoding.DecodeString(encoded)
	if err != nil {
		panic(fmt.Sprintf("decode base64 error:%v", err))
	}
	dec := gob.NewDecoder(bytes.NewReader(raw))
	var callMsg ethereum.CallMsg
	if err := dec.Decode(&callMsg); err != nil {
		panic(fmt.Sprintf("decode gob error:%v", err))
	}

	fmt.Println("from", callMsg.From.String())
	fmt.Println("to", callMsg.To.String())

	//gas, err := client.EstimateGas(context.Background(), callMsg)
	_, err = client.CallContract(context.Background(), callMsg, nil)
	if err != nil {
		fmt.Println("failed to estimate gas:", err)
	}
	require.NoError(t, err)

	//fmt.Println("gas:", gas)
}

// Get Tx Receipt
func TestDoEstimate(t *testing.T) {
	rawRPCURL := "http://localhost:7545"

	client, _ := ethclient.Dial(rawRPCURL)

	// ===== 反序列化 =====
	var callMsg ethereum.CallMsg
	callMsg.From = common.HexToAddress("0x602c62a0458429842e063902B2840C6Bc608c839")
	to := common.HexToAddress("0x1AB8525e3882Ae97b54f946821b485CBd65845F1")
	callMsg.To = &to
	n := new(big.Int)
	callMsg.Value, _ = n.SetString("1374407274464", 10)
	callMsg.Data = hexutils.HexToBytes("9623609d000000000000000000000000824f49a7b0c996821b58f1f2ef7f744ce26467330000000000000000000000004da82a327773965b8d4d85fa3db8249b387458e700000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044400ada75000000000000000000000000602c62a0458429842e063902b2840c6bc608c839000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	fmt.Println("from", callMsg.From.String())
	fmt.Println("to", callMsg.To.String())
	gas, err := client.EstimateGas(context.Background(), callMsg)
	//_, err = client.CallContract(context.Background(), callMsg, nil)
	if err != nil {
		fmt.Println("failed to estimate gas:", err)
	}
	require.NoError(t, err)

	fmt.Println("gas:", gas)
}
